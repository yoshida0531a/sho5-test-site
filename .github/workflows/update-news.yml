name: Update News with AI Summary

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours  
  workflow_dispatch:  # Manual trigger

jobs:
  update-news:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        
      - name: Generate news with AI
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
        run: |
          python3 << 'EOF'
          import json, requests, os
          from datetime import datetime
          
          api_key = os.environ.get('HF_API_KEY', '')
          print(f"API Key: {'‚úì' if api_key else '‚úó'}")
          
          def summarize(text):
              try:
                  response = requests.post(
                      "https://api-inference.huggingface.co/models/facebook/bart-large-cnn",
                      headers={"Authorization": f"Bearer {api_key}"},
                      json={"inputs": text[:500], "parameters": {"max_length": 100}},
                      timeout=30
                  )
                  if response.status_code == 200:
                      result = response.json()
                      return result[0].get('summary_text', text[:100] + '...')
                  print(f"API Error: {response.status_code}")
                  return text[:100] + '...'
              except Exception as e:
                  print(f"Error: {e}")
                  return text[:100] + '...'
          
          news = [
              {"title": "AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë", "content": "AIÊäÄË°ì„ÅÆÁô∫Â±ï„ÅåÁõÆË¶ö„Åæ„Åó„Åè„ÄÅËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜÂàÜÈáé„Åß„ÅÆÈù©Êñ∞„ÅåÁ∂ö„ÅÑ„Å¶„ÅÑ„Åæ„Åô„ÄÇÂ§ö„Åè„ÅÆ‰ºÅÊ•≠„ÅåAI„Çµ„Éº„Éì„Çπ„ÇíÂ±ïÈñã‰∏≠„ÄÇ", "link": "#"},
              {"title": "ÊåÅÁ∂öÂèØËÉΩ„Å™ÈñãÁô∫", "content": "Áí∞Â¢ÉÂïèÈ°å„Å∏„ÅÆÈñ¢ÂøÉ„ÅåÈ´ò„Åæ„Çã‰∏≠„ÄÅÊåÅÁ∂öÂèØËÉΩ„Å™ÈñãÁô∫ÁõÆÊ®ôÈÅîÊàê„Å∏„ÅÆÂèñ„ÇäÁµÑ„Åø„ÅåÂº∑Âåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ", "link": "#"}
          ]
          
          processed = [{
              "title": item["title"],
              "summary": summarize(item["content"]),
              "link": item["link"], 
              "pubDate": datetime.now().isoformat(),
              "processed_at": datetime.now().isoformat()
          } for item in news]
          
          with open('news-data.json', 'w', encoding='utf-8') as f:
              json.dump(processed, f, ensure_ascii=False, indent=2)
          
          print(f"‚úì Processed {len(processed)} articles")
          EOF
          
      - name: Update news.html
        run: |
          python3 << 'EOF'
          import json
          from datetime import datetime
          
          with open('news-data.json', 'r') as f:
              news = json.load(f)
          
          items = ''.join([f'''
            <div class="news-item">
              <h3><a href="{item["link"]}">{item["title"]}</a></h3>
              <p class="date">{datetime.now().strftime('%YÂπ¥%mÊúà%dÊó•')}</p>
              <p class="summary">{item["summary"]}</p>
            </div>''' for item in news])
          
          html = f'''<!DOCTYPE html>
          <html lang="ja">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Newsroom - Shogo Fun Site</title>
            <style>
              * {{ margin: 0; padding: 0; box-sizing: border-box; }}
              body {{ font-family: sans-serif; background: white; color: black; }}
              header {{ text-align: center; font-size: 28px; font-weight: bold; margin: 20px 0; }}
              .news-feed {{ width: calc(100% - 20px); max-width: 800px; margin: 0 auto; padding: 20px; }}
              @media (max-width: 600px) {{ .news-feed {{ width: 100%; padding: 10px; }} }}
              .news-item {{ border-bottom: 1px solid #ddd; margin-bottom: 20px; padding-bottom: 15px; }}
              .news-item h3 {{ margin: 5px 0; font-size: 18px; }}
              .news-item h3 a {{ color: black; text-decoration: none; }}
              .news-item h3 a:hover {{ text-decoration: underline; }}
              .news-item .date {{ margin: 5px 0; font-size: 12px; color: #666; }}
              .news-item .summary {{ margin: 10px 0; font-size: 14px; line-height: 1.5; }}
              .disclaimer {{ background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 20px 0; font-size: 12px; color: #666; }}
              footer {{ text-align: center; font-size: 12px; margin: 20px 0; }}
            </style>
          </head>
          <body>
            <header>Newsroom</header>
            <section class="news-feed">
              <div class="disclaimer">‚Äª AIÊäÄË°ì„ÅßË¶ÅÁ¥Ñ„ÉªÁ∑®ÈõÜ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇË©≥Á¥∞„ÅØÂÖÉ„Çµ„Ç§„Éà„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ</div>
              {items}
            </section>
            <footer>Copyright ¬© 2023-2025 Akira Yoshida. | Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M')}</footer>
          </body>
          </html>'''
          
          with open('news.html', 'w', encoding='utf-8') as f:
              f.write(html)
          
          print("‚úì HTML updated")
          EOF
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add news.html news-data.json
          
          if ! git diff --staged --quiet; then
            git commit -m "Update news with AI summaries ü§ñ"
            git push
          else
            echo "No changes"
          fi